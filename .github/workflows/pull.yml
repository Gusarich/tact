name: Pull request
on:
  pull_request:
    types: [opened, reopened]
permissions: read-all

jobs:
  build:
    name: Slack
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notify
        continue-on-error: true
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACKIFY_MARKDOWN: true
          SLACK_MESSAGE: |
            üç∞ [${{ github.event.pull_request.title }}](${{ github.event.pull_request.html_url }})
            üå≤ ${{ github.repository }}
            üë§ ${{ github.actor }}
            üîÄ ${{ github.event.pull_request.base.label }} <- ${{ github.event.pull_request.head.label }}

  review:
    name: AI Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "yarn"

      - name: Install dependencies
        shell: bash
        run: |
          corepack enable
          yarn install

      - name: Run Claude Code with prompt file
        id: code-review
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: ".github/PROMPTS/review.txt"
          allowed_tools: "Bash(git:*),View,GlobTool,GrepTool,BatchTool"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Extract and Comment PR Review
        if: steps.code-review.outputs.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const executionFile = '${{ steps.code-review.outputs.execution_file }}';
            const executionLog = JSON.parse(fs.readFileSync(executionFile, 'utf8'));

            // Extract the review content from the execution log
            // The execution log contains the full conversation including Claude's responses
            let review = '';

            // Find the last assistant message which should contain the review
            for (let i = executionLog.length - 1; i >= 0; i--) {
              if (executionLog[i].role === 'assistant') {
                review = executionLog[i].content;
                break;
              }
            }

            if (review) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "## Claude Code Review\n\n" + review + "\n\n*Generated by Claude Code*"
              });
            }